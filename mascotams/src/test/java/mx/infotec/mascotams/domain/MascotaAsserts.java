package mx.infotec.mascotams.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class MascotaAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMascotaAllPropertiesEquals(Mascota expected, Mascota actual) {
        assertMascotaAutoGeneratedPropertiesEquals(expected, actual);
        assertMascotaAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMascotaAllUpdatablePropertiesEquals(Mascota expected, Mascota actual) {
        assertMascotaUpdatableFieldsEquals(expected, actual);
        assertMascotaUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMascotaAutoGeneratedPropertiesEquals(Mascota expected, Mascota actual) {
        assertThat(expected)
            .as("Verify Mascota auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMascotaUpdatableFieldsEquals(Mascota expected, Mascota actual) {
        assertThat(expected)
            .as("Verify Mascota relevant properties")
            .satisfies(e -> assertThat(e.getNombre()).as("check nombre").isEqualTo(actual.getNombre()))
            .satisfies(e -> assertThat(e.getEdad()).as("check edad").isEqualTo(actual.getEdad()))
            .satisfies(e -> assertThat(e.getPrecio()).as("check precio").isEqualTo(actual.getPrecio()))
            .satisfies(e -> assertThat(e.getFechaNacimiento()).as("check fechaNacimiento").isEqualTo(actual.getFechaNacimiento()))
            .satisfies(e -> assertThat(e.getFoto()).as("check foto").isEqualTo(actual.getFoto()))
            .satisfies(e -> assertThat(e.getFotoContentType()).as("check foto contenty type").isEqualTo(actual.getFotoContentType()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMascotaUpdatableRelationshipsEquals(Mascota expected, Mascota actual) {
        // empty method
    }
}
